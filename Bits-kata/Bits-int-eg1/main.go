package main

import (
	"fmt"
)

//конвертировать число в двоичную систему счисления
//Делим исходное число на основание искомого числа и записываем остаток до тех пор, пока неполное частное не будет равно нулю. Полученные остатки записываем в обратном порядке.
//Деление	Целое частное	Остаток
// 3 / 2	1	1
// 1 / 2	0	1
// 3_10 = 11_2

func main() {

	//num := 11
	//fmt.Printf("Двоичное представление числа %d: %s\n", num, intToBinary(num))

	// проверка корректности конвертации
	str := "1111"
	fmt.Println(binaryToInt(str))

}

func intToBinary(n int) string {

	if n == 0 {
		return "0"
	}
	var binary string

	for n > 0 {
		binary = fmt.Sprintf("%d%s", n%2, binary)
		n = n / 2
	}
	return binary
}

func binaryToInt(binary string) int {

	var num int

	for _, digit := range binary {
		digitInt := int(digit - '0')
		num = num*2 + digitInt
	}

	return num

}

/*
Что происходит в digit - '0'?
digit: Это текущий символ строки, по которому мы итерируем. В случае двоичной строки это может быть либо '0', либо '1'.

'0': Это символ '0', у которого ASCII код равен 48.

digit - '0': Эта операция вычитает ASCII код символа '0' из ASCII кода текущего символа digit.

Если digit равен '0', то digit - '0' равно 48 - 48 = 0.
Если digit равен '1', то digit - '0' равно 49 - 48 = 1.
Таким образом, результатом выражения digit - '0' является преобразование символа '0' или '1' в соответствующее целое число 0 или 1.

*/
